1. Cats and shelves
    An infinite number of shelves are arranged one above the other in a staggered fashion.
    The cat can jump either one or three shelves at a time: from shelf i to shelf i+1 or i+3 (the cat cannot climb on the shelf directly above its head), according to the illustration:

                    ┌────────┐
                    │-6------│
                    └────────┘
    ┌────────┐       
    │------5-│        
    └────────┘  ┌─────► OK!
                │    ┌────────┐
                │    │-4------│
                │    └────────┘
    ┌────────┐  │
    │------3-│  │     
    BANG!────┘  ├─────► OK! 
    ▲  |\_/|  │    ┌────────┐
    │ ("^-^)  │    │-2------│
    │ )   (   │    └────────┘
    ┌─┴─┴───┴┬──┘
    │------1-│
    └────────┘
    Input
    Start and finish shelf numbers (always positive integers, finish no smaller than start)

    Task
    Find the minimum number of jumps to go from start to finish

    Example
    Start 1, finish 5, then answer is 2 (1 => 4 => 5 or 1 => 2 => 5)

2. Send in the clones
    It seemed a good idea at the time...

    Why I did it?
    After a year on Codewars I really needed a holiday...

    But not wanting to drift backwards in the honour rankings while I was away, I hatched a cunning plan!

    The Cunning Plan
    So I borrowed my friend's "Clone Machine" and cloned myself :-)

    Now my clone can do my Kata solutions for me and I can relax!

    Brilliant!!

    Furthermore, at the end of the day my clone can re-clone herself...

    Double brilliant!!

    I wonder why I didn't think to do this earlier?

    So as I left for the airport I gave my clone instructions to:

    do my Kata solutions for me
    feed the cat
    try to keep the house tidy and not eat too much
    sleep
    clone yourself
    repeat same next day
    The Flaw
    Well, how was I supposed to know that cloned DNA is faulty?

    :-(

    Every time they sleep they wake up with decreased ability - they get slower... they get dumber... they are only able to solve 1 less Kata than they could the previous day.

    For example, if they can solve 10 Kata today, then tomorrow they can solve only 9 Kata, then 8, 7, 6... Eventually they can't do much more than sit around all day playing video games.

    And (unlike me), when the clone cannot solve any more Kata they are no longer clever enough to operate the clone machine either!

    The Return Home
    I suspected something was wrong when I noticed my Codewars honour had stopped rising.

    I made a hasty return home...

    ...and found 100s of clones scattered through the house. Mostly they sit harmlessly mumbling to themselves. The largest group have made a kind of nest in my loungeroom where they sit catatonic in front of the PlayStation.

    The whole place needs fumigating.

    The fridge and pantry are empty.

    And I can't find the cat.

    Kata Task
    Write a method to predict the final outcome where:

    Input:

    kata-per-day is the number of Kata I can solve per day
    Output:

    [number-of-clones, number-of-kata-solved-by-clones]

3. Factorial
    In mathematics, the factorial of a non-negative integer n, denoted by n!, is the product of all positive integers less than or equal to n. For example: 5! = 5 * 4 * 3 * 2 * 1 = 120. By convention the value of 0! is 1.

    Write a function to calculate factorial for a given input. If input is below 0 or above 12 throw an exception of type ArgumentOutOfRangeException (C#) or IllegalArgumentException (Java) or RangeException (PHP) or throw a RangeError (JavaScript) or ValueError (Python) or return -1 (C).

4. Fibonnaci
    Create function fib that returns n'th element of Fibonacci sequence (classic programming task).

5. Array-squareUp b!
    Given an integer n greater than or equal to 0, create and return an array with the following pattern:

    squareUp(3) => [0, 0, 1, 0, 2, 1, 3, 2, 1]
    squareUp(2) => [0, 1, 2, 1]
    squareUp(4) => [0, 0, 0, 1, 0, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 1]

6. Sum of array singles
    In this Kata, you will be given an array of numbers in which two numbers occur once and the rest occur only twice. Your task will be to return the sum of the numbers that occur only once.

    For example, repeats([4,5,7,5,4,8]) = 15 because only the numbers 7 and 8 occur once, and their sum is 15.

    More examples in the test cases.

    Good luck!

7. Odd Ones Out!
    The town sheriff dislikes odd numbers and wants all odd numbered families out of town! In town crowds can form and individuals are often mixed with other people. However you can distinguish the family they belong to by the number on their shirt. As the sheriff is rather lazy, he decides to just remove families from the town by checking the number on their shirt. As a programmer, help the sheriff remove all the odd numbered families from the town!

    Task
    You are given a list of numbers. The numbers each repeat a certain number of times. Remove all numbers that repeat an odd number of times while keeping everything else the same.

    oddOnesOut([1, 2, 3, 1, 3, 3]) = [1, 1]
    In the above example:

    the number 1 appears twice
    the number 2 appears once
    the number 3 appears three times
    2 and 3 both appear an odd number of times, so they are removed from the list. The final result is: [1,1]

8. Stone Pickaxe Crafting
    Note: Based off Minecraft, hopefully you atleast know the game!

    Story: You want to create a giant mine shaft, but your a little stingy with your iron and diamonds and would not mine out all of the stone with iron or diamond pickaxes. Instead, you rely on less durable but cheaper stone pickaxes! You will need a lot of stone pickaxes though as they break faster than diamond or iron ones, so you need to find out how many stone pickaxes you can craft before you run out of sticks and cobblestones. Unfortunately, your not an organized person, and you leave all of your materials into a single chest with random junk that you need to filter.

    Task: Given an array, return the maximum amount of stone pickaxes you can craft before you run out of sticks and cobblestones. Within the array would be a series of strings with the exact names of the materials listed below. If the array has atleast 3 "Cobblestones" and 2 "Sticks" you can craft a singular stone pickaxe. Do not count any materials apart from "Cobblestones", "Sticks" and "Wood". Wood can be converted into 4 sticks!

    Here are the materials you would expect in a array:

    Sticks
    Cobblestone
    Stone (These are different from cobblestone and cannot be used to make a stone pickaxe.)
    Wool
    Dirt
    Wood (Can be treated as sticks, typically 4 sticks for 1 wood)
    Diamond
    Array sizes are randomized and range from 1 - 200 with randomized contents.

    Examples:

    Array: ["Sticks", "Sticks", "Cobblestone", "Cobblestone", "Cobblestone"]
    Returned: 1

    Array: ["Wood", "Cobblestone", "Cobblestone", "Cobblestone"]
    Returned: 1

    Array: []
    Returned: 0

    Array: ["Sticks", "Wool", "Cobblestone"]
    Returned: 0